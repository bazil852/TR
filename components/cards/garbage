 <Grid container>
          <Grid item xs={8}></Grid>
          <Grid item xs={4} sx={{ pl: 2 }}>
            <Box
              sx={{
                mt: 4,
                mb: 2,
              }}
            >
              <button
                style={{
                  background: "linear-gradient(to right,#790F87,#794AE3)",
                  cursor: "pointer",
                  border: "none",
                  padding: "7px 20px",
                }}
                onClick={handlebacktest}
              >
                <Typography color={"white"}>Test Your Strategy!</Typography>
              </button>
              <button
                style={{
                  background: "linear-gradient(to right,#790F87,#794AE3)",
                  cursor: "pointer",
                  border: "none",
                  padding: "7px 20px",
                  marginLeft: "10px",
                }}
                onClick={handleTestStrategy}
              >
                <Typography color={"white"}>Submit</Typography>
              </button>
            </Box>
          </Grid>
        </Grid>
<Grid container>
          <Grid
            items
            md={8}
            lg={8}
            sx={{
              background:
                "linear-gradient(180deg, rgba(121, 13, 131, 0.0925) 0%, rgba(41, 8, 77, 0.37) 100%)",
              p: 2,
              borderRadius: "8px",
              minHeight: 450,
            }}
          >
            <Grid container>
              <Grid item xs={11}>
                <Box sx={{ display: "flex", flexDirection: "column" }}>
                  <Box
                    sx={{
                      display: "flex",
                      alignItems: "center",
                    }}
                  >
                    <Box>
                      <Typography
                        sx={{
                          fontSize: "13px",
                          lineHeight: "16px",
                          letterSpacing: "1px",
                          p: 1,
                        }}
                      >
                        AVAX/ TetherUS 1h Binance Trading View 020.23 H20.24
                        L19.29 C 20.00 -0.23(-1.14%)
                      </Typography>
                      <Typography
                        sx={{
                          fontSize: "13px",
                          lineHeight: "16px",
                          letterSpacing: "1px",
                          p: 1,
                        }}
                      >
                        Zig Zag 5 10 Precent T.. 5 -5 25 85 45 85
                      </Typography>
                      <Typography
                        sx={{
                          fontSize: "13px",
                          lineHeight: "16px",
                          letterSpacing: "1px",
                          p: 1,
                        }}
                      >
                        Dashed Dashed 14 Datted 4 Datted 6 Datted 15 Solid 13
                        Solid top_right BTCUSD Dashed London New York, Tokyo,
                        HongKong, Sydney
                      </Typography>
                    </Box>
                    <Box
                      sx={{
                        m: 2,
                        px: 1,
                        py: 2,
                        height: "fit-content",
                        background: "linear-gradient(#310B4E, #3D0D58)",
                        backgroundBlendMode: "overlay",
                        backdropFilter: "blur(100px)",
                        borderRadius: "8px",
                        minWidth: "130px",
                      }}
                    >
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography
                          sx={{
                            fontSize: "12px",
                            letterSpacing: "1px",
                            pb: 1,
                          }}
                        >
                          ADR
                        </Typography>
                        <Typography
                          sx={{
                            fontSize: "12px",
                            letterSpacing: "1px",
                            pb: 1,
                          }}
                        >
                          1.92 USDT
                        </Typography>
                      </Box>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography
                          sx={{
                            fontSize: "12px",
                            letterSpacing: "1px",
                            pb: 1,
                          }}
                        >
                          ADRXS
                        </Typography>
                        <Typography
                          sx={{
                            fontSize: "12px",
                            letterSpacing: "1px",
                            pb: 1,
                          }}
                        >
                          5.76 USDT
                        </Typography>
                      </Box>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography
                          sx={{
                            fontSize: "12px",
                            letterSpacing: "1px",
                            pb: 1,
                          }}
                        >
                          AWR
                        </Typography>
                        <Typography
                          sx={{
                            fontSize: "12px",
                            letterSpacing: "1px",
                            pb: 1,
                          }}
                        >
                          6.98 USDT
                        </Typography>
                      </Box>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography
                          sx={{
                            fontSize: "12px",
                            letterSpacing: "1px",
                            pb: 1,
                          }}
                        >
                          AMR
                        </Typography>
                        <Typography
                          sx={{
                            fontSize: "12px",
                            letterSpacing: "1px",
                            pb: 1,
                          }}
                        >
                          41.03 USDT
                        </Typography>
                      </Box>
                    </Box>
                  </Box>
                  <Chart data={chartData} />
                </Box>
              </Grid>
              <Grid item xs={1} sx={{ pl: 1 }}>
                {/* <Box>
                  <Typography
                    sx={{
                      fontSize: "12px",
                      fontWeight: 600,
                      pb: 1,
                      display: "flex",
                      alignItems: "center",
                    }}
                  >
                    USDT
                    <button
                      style={{
                        background: "none",
                        border: "none",
                        padding: "0px",
                        margin: "0px 3px",
                        cursor: "pointer",
                      }}
                    >
                      <SmallDown />
                    </button>
                  </Typography>
                  {USDT.map((item, index) => (
                    <Typography
                      key={index}
                      sx={{
                        fontSize: "12px",
                        pb: 1,
                      }}
                    >
                      {item}
                    </Typography>
                  ))}
                </Box> */}
              </Grid>
            </Grid>
          </Grid>
          <Grid item xs={4} sx={{ pl: 2 }}>
            <Box
              sx={{
                background:
                  "linear-gradient(180deg, rgba(121, 13, 131, 0.0925) 0%, rgba(41, 8, 77, 0.37) 100%)",
                borderRadius: "8px",
                minHeight: 600,
              }}
            >
              <Box sx={{ display: "flex", minWidth: "100%" }}>
                <Box
                  sx={{
                    display: "flex",
                    flexDirection: "column",
                    minWidth: "50%",
                  }}
                >
                  {/* {[...Array(10)].map((_, index) => ( */}
                  <Typography
                    // key={index}
                    sx={{
                      display: "flex",
                      flexDirection: "row",
                      alignItems: "center",
                      padding: "16px",
                      textAlign: "center",
                      px: "auto",
                      py: 3,
                      borderBottom: "1px solid grey",
                    }}
                  >
                    {" "}
                    Total Profit{" "}
                  </Typography>
                  {/* ))} */}
                  <Typography
                    // key={index}
                    sx={{
                      display: "flex",
                      flexDirection: "row",
                      alignItems: "center",
                      padding: "16px",
                      textAlign: "center",
                      px: "auto",
                      py: 3,
                      borderBottom: "1px solid grey",
                    }}
                  >
                    {" "}
                    Total Buy Orders{" "}
                  </Typography>
                  <Typography
                    // key={index}
                    sx={{
                      display: "flex",
                      flexDirection: "row",
                      alignItems: "center",
                      padding: "16px",
                      textAlign: "center",
                      px: "auto",
                      py: 3,
                      borderBottom: "1px solid grey",
                    }}
                  >
                    {" "}
                    Total Sell Orders{" "}
                  </Typography>
                </Box>
                <Box
                  sx={{
                    display: "flex",
                    flexDirection: "column",
                    minWidth: "50%",
                  }}
                >
                  {/* {[...Array(10)].map((_, index) => ( */}
                  <Typography
                    // key={index}
                    sx={{
                      display: "flex",
                      flexDirection: "row",
                      alignItems: "center",
                      padding: "16px",
                      textAlign: "center",
                      borderBottom: "1px solid grey",
                      px: "auto",
                      py: 3,
                      borderLeft: "1px solid grey",
                    }}
                  >
                    {chartData?.profit}
                  </Typography>
                  <Typography
                    // key={index}
                    sx={{
                      display: "flex",
                      flexDirection: "row",
                      alignItems: "center",
                      padding: "16px",
                      textAlign: "center",
                      borderBottom: "1px solid grey",
                      px: "auto",
                      py: 3,
                      borderLeft: "1px solid grey",
                    }}
                  >
                    {chartData?.buy_orders?.length}
                  </Typography>
                  <Typography
                    // key={index}
                    sx={{
                      display: "flex",
                      flexDirection: "row",
                      alignItems: "center",
                      padding: "16px",
                      textAlign: "center",
                      borderBottom: "1px solid grey",
                      px: "auto",
                      py: 3,
                      borderLeft: "1px solid grey",
                    }}
                  >
                    {chartData?.sell_orders?.length}
                  </Typography>
                  {/* // ))} */}
                </Box>
              </Box>
            </Box>
          </Grid>
        </Grid>


   

       


       // import * as d3 from "d3";
// import { useSelector } from "react-redux";

// const GraphOfConsolidatedPortfolio = ({ data }) => {
//   const [dataWithWorth, setDataWithWorth] = useState([0]);
//   const isDrawerOpen = useSelector((state) => state.dashboardWidth.value);
//   const [width, setWidth] = useState(globalThis?.innerWidth);
//   const colors = ["#36F097", "#3DFFDC", "#1ED6FF", "#2688FC", "#5A3FFE"];
//   const totalRadius = width < 960 && width > 899 ? 16 : 19;
//   const minRadius = 10;
//   const minimumValueRadius = 10;
//   const [hoveredIndex, setHoveredIndex] = useState(null);

//   useEffect(() => {
//     const hasAllElementsZeroOrUndefined = data?.every(
//       (obj) => obj.usdt_price === 0 || obj.usdt_price === undefined
//     );

//     if (hasAllElementsZeroOrUndefined) {
//       setDataWithWorth([]);
//     } else {
//       const computedData = data?.map((obj) => ({
//         ...obj,
//         worth: Math.max(
//           Number(obj.usdt_price),
//           Math.max(Number(obj.usdt_price)) + 20
//         ),
//       }));

//       const sortedData = computedData.sort((a, b) => b.worth - a.worth);

//       const topFour = sortedData.slice(0, 4);
//       const remainingData = sortedData.slice(4);

//       const remainingWorth = remainingData.reduce(
//         (sum, obj) => sum + obj.worth,
//         0
//       );

//       if (remainingData.length > 0) {
//         setDataWithWorth([
//           ...topFour,
//           { coin_name: "Others", worth: remainingWorth },
//         ]);
//       } else {
//         setDataWithWorth([...topFour]);
//       }
//     }

//     console.log("data", data);
//   }, [data]);

//   useEffect(() => {
//     const handleResize = () => setWidth(globalThis?.innerWidth);
//     globalThis?.addEventListener("resize", handleResize);
//     return () => globalThis?.removeEventListener("resize", handleResize);
//   }, []);

//   const totalWorth = dataWithWorth.reduce((sum, obj) => sum + obj.worth, 0);

//   const radiusScale = d3
//     .scaleSqrt()
//     .domain([0, totalWorth])
//     .range([minRadius, totalRadius]);

//   let accumulatedPercentage = 0;

//   const noDataToShow = dataWithWorth.length === 0;

//   return (
//     <>
//       {noDataToShow ? (
//         <text
//           style={{
//             height: "230px",
//             fontSize: "16px",
//             fontFamily: "Barlow, sans-serif",
//             fontWeight: "600",
//             color: "#ACB2B7",
//             display: "flex",
//             alignItems: "center",
//             justifyContent: "center",
//           }}
//         >
//           No data to show
//         </text>
//       ) : (
//         <svg
//           viewBox="-6 -8 50 50"
//           style={{
//             height: "250px",
//             width: "230px",
//             position: "relative",
//             overflow: "visible",
//             float: "left",
//             marginLeft:
//               width < 960 && width > 899
//                 ? "5px"
//                 : width < 900 && width > 700
//                 ? "100px"
//                 : width < 700 && width > 600
//                 ? "50px"
//                 : width < 600 && width > 450
//                 ? "25%"
//                 : width < 450 && width > 400
//                 ? "17%"
//                 : width < 400 && width > 350
//                 ? "15%"
//                 : width < 350
//                 ? "7%"
//                 : width > 1099 && width < 1200 && !isDrawerOpen
//                 ? "30px"
//                 : width > 1199 && width < 1330 && !isDrawerOpen
//                 ? "50px"
//                 : width > 999 && width < 1100 && isDrawerOpen
//                 ? "18%"
//                 : width > 1099 && width < 1200 && isDrawerOpen
//                 ? "20%"
//                 : width > 1330
//                 ? "80px"
//                 : "30px",
//           }}
//         >
//           {dataWithWorth.map((item, index) => {
//             const percentage = item.worth / totalWorth;
//             let radius = radiusScale(item.worth);
//             if (item.coin_name === "Others" && radius < minimumValueRadius) {
//               radius = minimumValueRadius;
//             }
//             const start = accumulatedPercentage * 360;
//             const end = start + percentage * 360;

//             const largeArcFlag = percentage > 0.5 ? 1 : 0;
//             const startX =
//               18 + radius * Math.cos(((start - 90) * Math.PI) / 180);
//             const startY =
//               18 + radius * Math.sin(((start - 90) * Math.PI) / 180);
//             const endX = 18 + radius * Math.cos(((end - 90) * Math.PI) / 180);
//             const endY = 18 + radius * Math.sin(((end - 90) * Math.PI) / 180);

//             const centerX =
//               18 +
//               radius *
//                 Math.cos(((start + percentage * 180 - 90) * Math.PI) / 180);
//             const centerY =
//               18 +
//               radius *
//                 Math.sin(((start + percentage * 180 - 90) * Math.PI) / 180);
//             const midX =
//               18 +
//               (radius + 2) *
//                 Math.cos(((start + percentage * 180 - 90) * Math.PI) / 180);
//             const midY =
//               18 +
//               (radius + 8) *
//                 Math.sin(((start + percentage * 180 - 90) * Math.PI) / 180);
//             const labelX =
//               18 +
//               (radius + 6) *
//                 Math.cos(((start + percentage * 180 - 90) * Math.PI) / 180);
//             const labelY =
//               17 +
//               (radius + 9) *
//                 Math.sin(((start + percentage * 180 - 85) * Math.PI) / 180) +
//               1;
//             const alignmentBaseline =
//               start + percentage * 180 > 180
//                 ? "text-before-edge"
//                 : "text-after-edge";

//             accumulatedPercentage += percentage;

//             const isHovered = index === hoveredIndex;

//             return (
//               <g
//                 key={index}
//                 onMouseEnter={() => setHoveredIndex(index)}
//                 onMouseLeave={() => setHoveredIndex(null)}
//               >
//                 <path
//                   d={`
//                     M 18 18
//                     L ${startX} ${startY}
//                     A ${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY}
//                     z
//                   `}
//                   fill={colors[index % colors.length]}
//                   style={{
//                     stroke: "none",
//                     // filter: "drop-shadow(1px 1px 1px rgba(0, 0, 0, 0.2))",
//                   }}
//                 />
//                 {isHovered && (
//                   <>
//                     <line
//                       x1={centerX}
//                       y1={centerY}
//                       x2={midX}
//                       y2={midY}
//                       stroke="#A8A8A8"
//                       strokeWidth="0.2"
//                     />
//                     <path
//                       d={`
//                         M ${midX} ${midY}
//                         H ${labelX}
//                       `}
//                       stroke="#A8A8A8"
//                       strokeWidth="0.2"
//                     />
//                     <text
//                       x={labelX}
//                       y={labelY}
//                       fill="#A8A8A8"
//                       style={{ fontSize: "2.6px" }}
//                       textAnchor={labelX > 18 ? "start" : "end"}
//                       alignmentBaseline={alignmentBaseline}
//                     >
//                       {item.coin_name}
//                     </text>
//                   </>
//                 )}
//               </g>
//             );
//           })}
//         </svg>
//       )}
//     </>
//   );
// };

// export default GraphOfConsolidatedPortfolio;


// import React, { useEffect, useState, useRef } from "react";
// import { Box } from "@mui/material";
// import {
//   BarChart,
//   Bar,
//   XAxis,
//   YAxis,
//   CartesianGrid,
//   Tooltip,
//   Legend,
// } from "recharts";
// import { useSelector } from "react-redux";

// const CustomTooltip = ({ active, payload, label }) => {
//   if (active && payload && payload.length) {
//     return (
//       <div
//         style={{
//           backgroundColor: "#3f51b5",
//           padding: "10px",
//           borderRadius: "5px",
//           color: "white",
//           fontFamily: "Barlow, sans-serif",
//           fontSize: "14px",
//         }}
//       >
//         <p>Index: {label}</p>
//         <p>Drawdown: {payload[0].value}%</p>
//         <p>Deviation: {payload[1].value}%</p>
//       </div>
//     );
//   }
//   return null;
// };

// const Graph1_Bar = ({ data }) => {
//   const [width, setWidth] = useState(0);
//   const isDrawerOpen = useSelector((state) => state.dashboardWidth.value);
//   const ref = useRef(null);

//   const chartData = data[0].drawdown.map((drawdown, index) => ({
//     index: (index + 1).toString().padStart(2, "0"),
//     drawdown: drawdown,
//     deviation: data[1].deviation[index] || null,
//   }));

//   useEffect(() => {
//     const handleResize = () => {
//       if (ref.current) {
//         setWidth(ref.current.clientWidth);
//       }
//     };

//     handleResize();
//     window.addEventListener("resize", handleResize);
//     return () => window.removeEventListener("resize", handleResize);
//   }, []);

//   const totalBars = chartData.length;
//   const minBarWidth = 50;
//   const barGap = 10;
//   const chartWidth = Math.max(width, totalBars * (minBarWidth + barGap));

//   return (
//     <Box
//       ref={ref}
//       sx={{
//         maxWidth: "90vw",
//         height: 330,
//         py: 3,
//         pl: 2,
//         overflowX: totalBars < 6 && width < 365 ? "hidden" : "auto",
//         overflowY: "hidden",
//         "&::-webkit-scrollbar": {
//           height: "3px",
//         },
//         "&::-webkit-scrollbar-track": {
//           background: "none",
//           mx: 2,
//         },
//         "&::-webkit-scrollbar-thumb": {
//           background: "#888",
//           borderRadius: "4px",
//         },
//       }}
//     >
//       <BarChart
//         width={chartWidth}
//         height={300}
//         data={chartData}
//         barCategoryGap={barGap}
//         style={{
//           fontFamily: "Barlow, sans-serif",
//         }}
//       >
//         <CartesianGrid
//           stroke="#A8A8A8"
//           strokeDasharray="2 2"
//           opacity={0.3}
//           vertical={false}
//         />
//         <XAxis dataKey="index" />
//         <YAxis yAxisId="right" orientation="right" axisLine={false} />
//         <Tooltip content={<CustomTooltip />} />
//         <Legend
//           sx={{
//             color: "#A8A8A8",
//           }}
//         />
//         <Bar yAxisId="right" dataKey="drawdown" fill="#36F097" />
//         <Bar yAxisId="right" dataKey="deviation" fill="#268AFF" />
//       </BarChart>
//     </Box>
//   );
// };

// export default Graph1_Bar;
